//â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  Prisma datasource & generator
//â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

//â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  Supporting enums
//â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
enum ConversationType {
  DIRECT
  SUPPORT_ROOM
  COMMUNITY
}

enum ParticipantRole {
  CUSTOMER
  AGENT
  OWNER
}

enum MessageContentType {
  TEXT
  FILE
  IMAGE
  VIDEO
  OTHER
}

//â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  Existing top-level tables (minimal stubs)
//â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
model User {
  id           BigInt       @id @default(autoincrement())
  email        String       @unique
  passwordHash String
  name         String       // ðŸ‘ˆ Add this
  businessId   BigInt?      // Optional if only agents belong to businesses
  business     Business?    @relation(fields: [businessId], references: [id])

  participants Participant[]
  messages     Message[]    @relation("MessageSender")
}

model Business {
  id           BigInt       @id @default(autoincrement())
  name         String       @unique  // ðŸ‘ˆ Add this
  conversations Conversation[]
  users        User[]       // ðŸ‘ˆ Back relation to allow querying all staff
}

//â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  Chat schema proper
//â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
model Conversation {
  id           BigInt           @id @default(autoincrement())
  business     Business         @relation(fields: [businessId], references: [id])
  businessId   BigInt
  type         ConversationType
  participants Participant[]
  messages     Message[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@index([id, createdAt])
}

model Participant {
  id             BigInt          @id @default(autoincrement())
  conversation   Conversation    @relation(fields: [conversationId], references: [id])
  conversationId BigInt
  user           User            @relation(fields: [userId], references: [id])
  userId         BigInt
  role           ParticipantRole
  joinedAt       DateTime        @default(now())

  @@unique([conversationId, userId])
}

model Message {
  id             BigInt             @id @default(autoincrement())
  conversation   Conversation       @relation(fields: [conversationId], references: [id])
  conversationId BigInt
  sender         User?              @relation("MessageSender", fields: [senderId], references: [id])
  senderId       BigInt?
  contentType    MessageContentType @default(TEXT)
  body           String?
  fileUrl        String?
  mimeType       String?
  createdAt      DateTime           @default(now())
  readAt         DateTime?
  editedAt       DateTime?
  deletedAt      DateTime?
  attachments    Attachment[]

  @@index([conversationId, createdAt])
  @@index([senderId, createdAt])
}

model Attachment {
  id        BigInt  @id @default(autoincrement())
  message   Message @relation(fields: [messageId], references: [id])
  messageId BigInt
  url       String
  mimeType  String
  width     Int?
  height    Int?
  sizeBytes Int?
}

// Optional: Like/Reaction Table
// model Reaction {
//   message   Message @relation(fields: [messageId], references: [id])
//   messageId BigInt
//   user      User    @relation(fields: [userId], references: [id])
//   userId    BigInt
//   emoji     String
//   @@id([messageId, userId, emoji])
// }

